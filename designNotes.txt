#@+leo-ver=4
#@+node:@file designNotes.txt
#@+others
#@+node:general
#@+at
# Notes on freemail protocols
# 
# 1) All messages are sent to/from 'mailsites'
# 
# 2) freemail is highly spam-resistant - before you send to someone, you have 
# to
#    go through a protocol to get their permission. Think of it as having to
#    'knock on someone's door' before they open their door and listen to you.
# 
# 3) What is a 'mailsite'?
# 
# A mailsite is a kind of freesite, with certain information in certain 
# places.
# 
# With email, the concept is that of sending to 'user' at 'domain' - via the 
# address
# 'user@domain'.
# 
# With 'freemail', we use the Freesite SSK hash as a metaphor for a 'domain'.
# 
# For example, you can send email to:
# 
#     fred@gYOSMewAxI8Hy5ZkQ4Ky2WeKUdoBCMA.free
# 
# With this address, freemail will target the freesite:
# 
#     SSK@gYOSMewAxI8Hy5ZkQ4Ky2WeKUdoBCMA/fred//
# 
# 4) Can a 'mailsite' live within a 'freesite'?
# 
# Sort of. We use a convention here.
# If the freesite lives at 'SSK@sitehash/sitename//', we should locate the
# mailsite at 'SSK@sitehash/sitename/freemail//'.
# That way, the SSK public/private keys for the freesite can be used for
# the mailsite as well.
# 
# For example, The Freedom Engine lives at:
#      SSK@rBjVda8pC-Kq04jUurIAb8IzAGcPAgM/TFE//
# 
# If the TFE site owner set up a mailsite, the mailsite URI would be at:
#      SSK@rBjVda8pC-Kq04jUurIAb8IzAGcPAgM/TFE/mailsite//
# 
# With this convention, freemail can do the DBR insertions independently of 
# those
# of the mail freesite.
# 
# However, many people will want to run mailsites that aren't connected to any
# freesites. In such a case, they'll just generate their own SSK 
# public/private
# keys, and their mailsite URI might be:
# 
#     SSK@ng7XyA4fmPWbAm5PhIJM1HFFStY/mailsite//
# 
# 5) What's in a 'mailsite'?
# 
# It is highly recommended that mailsites be inserted as DBR-based freesites.
# 
# A mailsite, as a DBR freesite, must contain at least the following docs:
# 
#     //index.html - for the benefit of those who try to browse the mailsite
#                    as if it were a freesite. Contains info about freemail,
#                    including links to the freemail freesite
# 
#     //session    - this is a document that provides the access details 
# required for
#                    other mailsites to initiate relationships with this 
# mailsite.
#                    This document consists of lines separated by newlines 
# '\n' only.
#                    Freenet metadata mimetype for this document should be 
# 'text/plain'.
# 
#                Line 1 - the string 'Freemail'
#                Line 2 - a KSK@ URI for receiving inbound CTS/RTS messages
#                Line 3 - a number, indicating the next available 'slot' for 
# inserting
#                         RTS/CTS messages on this queue
#                Lines 4-n - an Ascii-armoured SSLCrypto public key, to be 
# used by
#                         peers when encrypting to this mailsite, also used 
# for
#                         verifying signatures of RTS/CTS messages sent from 
# this mailsite.
# 
# 
# 6) What's this 'RTS'/'CTS'?
#    How do I establish contact with another mailsite?
# 
# 'RTS' means 'Request to Send', or, "Hi, I want to start sending messages to 
# you".
# 'CTS' means 'Clear to Send', or 'Hi, I'm now ready to receive messages from 
# you.
# 
# To send messages to a given mailsite for the first time, you must send that
# mailsite an 'RTS' message, and get a 'CTS' message back.
# 
# When Alice first sends mail to 'bob@bobhash.free', freemail checks to see
# if the peer 'bob' is already known. If not, then the following protocol 
# happens:
# 
#     1) Alice's mailsite generates a new SSK keypair
#        (Alice2BobPUB, Alice2BobPRIV)
#     2) Alice's mailsite retrieves SSK@bobhash/bob//key, to get Bob's
#        public encryption key
#     3) Alice's mailsite retrieves SSK@bobhash/bob//session, to get the KSK 
# URI
#        (call this KSK@bobrts), and the next available slot (say, 42).
#     4) Alice's mailsite composes a message, containing Alice's mailsite
#        URI, plus the new SSK public key (Alice2BobPUB). The message 
# effectively
#        says, "Hi Bob, I'm Alice, I want to talk to you, and my messages to 
# you
#        can be retrieved from SSK@Alice2BobPUB/0, SSK@Alice2BobPUB/1, ...
#        This message is encrypted against Bob's public crypto key
#     5) Alice's mailsite tries to insert this message into the key:
#        KSK@bobrts-42. If that fails, it tries 'KSK@bobrts-43', and so on, 
# until
#        there is no collision (which means a new slot has been found).
# 
#     Now, over to Bob
# 
#     6) Bob is polling his session queue. He picks up 'KSK@bobrts-44'. He now
#        knows that Alice wants to send messages to him.
#     7) Bob uses Alice's mailsite URI to get Alice's public crypto key, and 
# the
#        'secret' SSK URI on which to listen for messages from Alice. This 
# info
#        is encrypted, so that if anyone reads Bob's session queue, they can't
#        tell that it's Alice wanting to talk to him
#     8) Bob then writes a message, containing Alice's freesite URI, plus the
#        'listen' SSK uri which Alice sent, plus a public encryption key for
#        messages. This message means, "Ah, hi Alice,
#        I got your RTS message - all is fine - from now on, I'll listen for
#        messages from you on SSK@Alice2BobPUB/n and you should encrypt them
#        using this key I've sent you.
#     9) Bob retrieves Alice's 'session' KSK key, and posts the message there.
# 
#     Back to Alice
# 
#     10) Alice receives Bob's 'CTS' message, and from then knows that she
#         can send messages to Bob, and Bob will be listening for these
#         messages. She also has the public key against which to encrypt
#         these messages.
# 
#     Now, for Alice to send Bob a message:
# 
#     11) Alice composes message in her email client
# 
#     12) Alice sends the message, using an email 'identity' that's configured
#         to use the Freemail local SMTP server
# 
#     13) Freemail encrypts the message body against the public key which
#         Bob sent in his 'CTS' message, and inserts this into Freenet as
#         'SSK@Alice2Bob/n'
# 
#     Over to Bob
# 
#     14) From now on, Bob's mailsite regularly polls SSK@Alice2BobPUB/n...,
#         retrieving messages.
#     15) When a message comes in, Bob's mailsite decrypts it against the 
# private
#         key corresponding to the public key he issued to Alice, and 
# transfers
#         it to his freemail message store.
#     16) Freemail then sends back a 'confirm' message to Alice, indicating to
#         her freemail that he got the message.
#     16) Bob's email client fetches the plaintext message via freemail's 
# local
#         POP server
# 
# Note that this is asymmetrical. The email 'relationship' is one way - Bob is 
# now
# able to listen for emails from Alice, and to receive these. But there is no
# provision at this time for Alice to receive messages from Bob.
# 
# Typically, Bob will send an email reply to Alice. For the first email 
# message,
# Bob will RTS to Alice, and Alice will CTS back, after which Alice can 
# receive
# messages from Bob.
# 
# There is one huge reason for making this protocol asymmetrical, and 
# requiring
# that it happen separately in each direction: Due to the lag involved in 
# Freenet,
# it's very possible for Alice and Bob to be RTS'ing each other simultaneously
# without knowing it. It keeps the protocol simpler yet robust.
# 
# ---
# 
# All this is definitely an onerous task to set up - thankfully, it only needs
# to be done once for each new mailing relationship.
# 
# Now, if Bob starts getting spammed on his session queue, he can simply 
# insert a
# new 'KSK@bobsession' URI into //freemail/session on his freesite.
# 
# If Alice starts spamming Bob, then he can simply 'blacklist' her. She can 
# keep
# spamming to her heart's content, but Bob is no longer polling 
# 'SSK@Alice2BobPIB/n...'
# so he won't waste his time and bandwidth pulling in her messages.
# 
# 7) Why should a mailsite have such a 'dynamic' session URI and crypto 
# pubkey?
# 
# The purpose of a changeable session URI is to partly defend against spam 
# attacks.
# 
# The purpose of a changeable public crypto key is in case someone's public 
# key
# gets compromised.
# 
# -------------------------------------------------
# MESSAGE FORMATS
# -------------------------------------------------
# 
# Format of 'session' messages:
# 
# A 'session' message will be either an 'rts' or a 'cts'.
# 
# 'RTS' messages have the following format:
# 
#     Freemail
#     rts
#     <sender-address>
#     <recipient-address>
#     <sender-queue-uri>
# 
# where:
# 
#     <sender-address> is the freemail address of the
#     sender, eg 'fred@blahblahblahPAgM'
# 
#     <recipient-address> is the freemail address of
#     the recipient, eg 'mary@yadayadayadaPAgM'
# 
#     <sender-queue-uri> is an SSK uri on which the
#     recipient should listen for incoming messages
#     eg ('SSK@blahblahblah' - each message will be
#     written to 'SSK@blahblahblah/0', 'SSK@blahblahblah/1',...)
# 
# 'CTS' messages have the following format:
# 
#     Freemail
#     cts
#     <sender-address>
#     <recipient-address>
#     <sender-queue-uri>
#     <recipient-public-key>
# 
# where:
# 
#     <sender-address> is the freemail address of the
#     sender, eg 'fred@blahblahblahPAgM'
# 
#     <recipient-address> is the freemail address of
#     the recipient, eg 'mary@yadayadayadaPAgM'
# 
#     <sender-queue-uri> is an SSK uri on which the
#     recipient should listen for incoming messages
#     eg ('SSK@blahblahblah' - each message will be
#     written to 'SSK@blahblahblah/0', 'SSK@blahblahblah/1',...)
# 
#     <recipient-public-key> - an SSLCrypto public
#     key, ascii armoured - will take several lines
# 
# 
# -------------------------------------------------
# 
# Format of Mail Messages - DEPRECATED - OBSOLETE - see next section
# 
# Once a mailsite has received a 'CTS' message from a peer, the site will have
# an SSK private URI which it can post messages to 'SSK@privkey/n', and the
# peer will listen for those messages at 'SSK@pubkeyPAgM/n'.
# 
# The data posted to SSK@blahblah/n will be encrypted against the peer's
# public key (which the peer sent in the CTS).
# 
# The plaintext will have three header lines, followed by the body
# of the message. Each header line is terminated by a single newline ('\n')
# 
# The header line has the following format:
# 
#    Freemail
#    <type>
#    <msghash>
# 
# where:
# 
#     <type>     is 'Message' or 'Receipt', according to whether we're sending
#                a message or confirming we've received a message
#     <msghash>  is a hash of the plaintext of the message body. For the whole
#                life of a message, from composing, thru sending, receiving 
# and
#                confirming, this hash is used as the unique id of the message
# 
# ----------------------------------------------------
# 
# Format of Mail Messages - NEW
# 
# Given a confirmed mail queue, which the sender writes to as SSK@privkey/n 
# and
# the recipient reads from as SSK@pubkeyPAgM/n, there is no need for any 
# special
# headers or other information.
# 
# Messages are uniquely identified by a hash of their plaintext.
# 
# So what gets written to these slots is simply the full message body,
# encrypted against the receiving peer's key.
# 
# If the ciphertext is < 32k in size, the message will be written directly at
# this slot.
# 
# But SSK keys may not exceed 32k. So if the message ciphertext exceeds that 
# size,
# then the ciphertext will be inserted as a CHK, and an empty key with 
# 'redirect'
# metadata will be written to the slot.
# 
# Note here that the python 'freenet' module handles this automatically in its
# node.put() routine.
#@-at
#@-node:general
#@+node:simplification
#@+at
# Sequence of operation
# 
# - config wizard:
#     - pretty much unchanged
#     - may need to remove some general fields
# 
# - startup:
#     - temporarily stick a sleep loop into main fcp thread
# 
# - create identity
#     - identity fields:
#         - name (prompted as '<name> @ freemail)
#         - comments
#         - optional password
# 
#     - dbAddNewIdentity() changed
# 
#     - http create identity pages:
#         - add/remove fields, validation
#         - insermediate save page:
#             - inform user we're about to generate crypto key and insert
#               identity record into freenet, that it could take a while
#             - display 'success' record only when insertion complete
# 
#     - dbAddIdentity changes
# 
# - http display identities page:
#     - display new URI
# 
# - http display identity page:
#     - display stats
#     - display password, if present
# 
# - send a message:
#     - retrieve peer's site, get the KSK queue uri, get peer's key
#     - encrypt/sign message, insert into peer's queue
# 
# - receive a message:
#     - if can't decrypt, exit
#     - retrieve peer's KSK id record
#     - if we can't get peer's id record, or signature doesn't match
#         - drop the message quietly, exit
#     - if first time from this peer:
#         - if password:
#             - if message contains password:
#                 - set ok-to-send, save peer record
#             - else:
#                 - bounce back to peer with inserted text
#         - else just set ok-to-send, save peer record
#     - elif subsequent:
#         - retrieve/compare peer's id record
#         - if this differs from recorded peer's id record:
#             - send bounce to peer, exit
#     - if it's a receipt:
#         - look up message and mark as delivered
#     - else:
#         - send off a receipt
# 
# - scheduler:
#     - one thread per active polling slot - much faster
#     - one thread per item on outbound queue
#     - manager thread simply looks for outbound items, plus inactive slots 
# due for polling
#       and dispatches threads
# 
# - db changes
#     - no need for global slots tables - just hang 'cells' of slots off each 
# identity record
#     - new field in slot table - 'slotIsActive', indicating whether the slot 
# is currently being polled
#     - ditto for outbound messages
#     - simplify 'mailing relationships':
#         - no special SSK queue
#         - no dedicated crypto key
#         - no rts/cts
#         - just store initial peer record
# 
# - general:
#     - abolish thread limit - if user creates too many identities, tough shit
# 
# - new key formats:
# 
#     - KSK@freemail-myidname - holds the identity record, in plaintext - this 
# is a dbr file:
#         - FreemailIdentity
#           Version=<protocolversion>
#           Address=KSK@freemail-myidname
#           PasswordRequired=<password-hash> (or none)
#           NextSlot=<slot-no>
#           CryptoKey=<one-line ascii-armoured key>
#           End
# 
#     - KSK@freemail-myidname-nnn - holds each incoming message/receipt,
#       encrypted to recipient, signed by sender
#         - FreemailMessage
#           Version=<protocolversion>
#           Type=<msgtype> - one of 'bounce', 'message', 'receipt', 'resend'
#           From=<sender-address>
#           To=<recipient-address>
#           Seq=<message sequence no> - nnn if sent first time, or seq of 
# message being re-sent or bounced
#           Body=<one-line ascii-armoured message>
#           End
# 
#@-at
#@-node:simplification
#@+node:mailing lists
#@+at
# 3 types of mailing list:
#     1. FreeForAll:
#         - the 'in' queue and the 'out' queue are the same - a KSK queue
#         - no receipts/confirmations
#         - no need to subscribe
#         - does not require central server
# 
#     2. Private:
#         - separate 'in' and 'out' queues
#         - 'in' queue is an SSK sequence, where only members have the SSK
#           private key
#         - 'out' queue is an SSK sequence, where only the owner has the
#           SSK private key, and where only members have the decryption key
#         - options:
#             - restricted members list - yes/no
#             - list owner vets all messages, or all messages get 
# automatically
#               reposted from in to out
# 
# mailing list record contents:
#     - amOwner:
#         - flag which indicates that we own this list
#     - isFreeForAll:
#         - flag which indicates if this is a free-for-all list
#           if 1, then the list URI for reading and writing is a single queue
#           if 0, then list has separate in/out queues, and the out queue is
#           an SSK whose private key is held by list owner
#     - isPrivate:
#         - flag which indicates whether the list is restricted to
#           a known set of subscribers.
#         - if 1, then messages will only be transferred to the 'out' list if
#           the sender is on the subscribers list; also, the 'in' queue is SSK
#         - if 0, then all signed/verified messages will automatically relay 
# to
#           the 'out' queue, and the 'in' queue will be a KSK
#     - isModerated:
#         - indicates whether messages must first be approved by the moderator
#         - if 1, then messages will only be auto-relayed if the sender is 
# flagged
#           such
#     - subscribers:
#         - only valid if 'amOwner' and 'isPrivate' are 1. This is a cell 
# object, containing the
#           official subscribers as keys.
#         - Messages received from anyone not on this list will be silently 
# discarded
#         - each subscriber record is itself a cell object, with the 
# attributes:
#             - privilege:
#                 - one of 'auto', 'review' and 'mute'
#                 - 'auto' means auto-deliver
#                 - 'review' means that the moderator must vet
#                 - 'mute' is reserved for miscreant subscribers, who are 
# allowed
#                   to read messages but cannot post them
#     - subscribersLocal:
#         - list of local identities which are subscribed to the list
#         - when messages are retrieved from the list, they will be posted to 
# each local
#           subscriber's inbox
#     - listAddr:
#         - address of list - listname@lists.blahblah.freemail
#     - listName:
#         - name of list
#     - listSiteUri:
#         - public uri of the listsite
#     - listSiteUriPriv:
#         - private uri of the listsite, for inserting
#     - listSiteInsertPeriod:
#         - interval in seconds for inserting listsite, usually 86400 (1 day)
#     - listSiteLastInserted:
#         - absolute date in seconds when listsite was last inserted
#     - listSiteRefreshInProgress:
#         - indicates whether a refresh of the listsite is presently occurring
#     - listInUri:
#         - sequence uri for list owner to retrieve messages
#         - if isFreeForAll, this will be a KSK. Otherwise, an SSK
#     - listInUriPriv:
#         - sequence uri for posting messages
#         - if NOT isFreeForAll, this is a private SSK key distributed to 
# subscribers
#     - listInUriNext:
#         - current polling slot number - bottom of window
#     - listInSlots:
#         - slotmap for owner to poll for messages from subscribers
#     - listInSskPub:
#         - public SSK key for 'in' list
#     - listInSskPriv:
#         - private SSK key for 'in' list
#     - listOutUri:
#         - sequence URI for subscribers to retrieve messages
#     - listOutUriPriv:
#         - sequence private URI for owner to insert messages
#     - listOutUriNext:
#         - next slot for owner to post messages
#     - listOutSlots:
#         - slotmap for subscriber to poll for messages from others
#     - listOutSskPub:
#         - public SSK key for 'out' list
#     - listOutSskPriv:
#         - private SSK key for writing to 'out' list
#         - only possessed by list owner
#     - listInCryptoKey:
#         - encryption key of the list owner, used for encrypting
#           inbound messages to list owner
#     - listOutCryptoKey:
#         - encryption key issued to subscribers, enabling them
#           to decrypt messages posted to the 'out' queue
# 
# mailing list 'listsite' contents:
# 
#     FreemailList
#     Version=<protocolVersion>
#     Address=<listAddr>
#     IsFreeForAll=1|0
#     IsPrivate=1|0
#     IsModerated=1|0
#     InUri=<listInUri>
#     OutUri=<listOutUri>
#     NextSlot=<listInUriNext>
#     CryptoKey=<listInCryptoKey>
#     End
# 
# Message types:
#     1. Ordinary inbound message post - as for normal mail message
#     2. Ordinary oubound message post - as for normal mail message
#     3. Welcome to Private Group:
#         FreemailListMessage
#         Version=<protocolVersion>
#         Type=welcome
#         From=<listAddr>
#         To=<subscriber address>
#         InUriPriv=<listInUriPriv>
#         CryptoKeyOut=<listOutCryptoKey>
#         End
# 
#     4. Gag Notice:
#         - sent to miscreants who abuse the list
#     5. Ungag notice:
#         - forgiveness of miscreants
#     6. Group Termination Notice:
#         - group is shutting down, perhaps relocating to a new group
#           to evict one or more miscreants
#@-at
#@-node:mailing lists
#@-others
#@-node:@file designNotes.txt
#@-leo
